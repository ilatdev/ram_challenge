import type { NextPage } from 'next'
import dynamic from 'next/dynamic'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { Tcollections } from '../types'
import charCounter from '../utils/charCounter'
import fetchData from '../utils/fetchData'
import formatTime from '../utils/formatTime'
import getLocations from '../utils/getLocations'

const Home: NextPage = ({ result }: any) => {
  const JsonView = dynamic(() => import('react-json-view'), {
    ssr: false
  })

  return (
    <div className={styles.container}>
      <Head>
        <title>Rick and Morty Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.banner} />

      <main className={styles.main}>
        <h1 className={styles.title}>Rick and Morty Challenge</h1>
        <JsonView
          displayDataTypes={false}
          style={{
            padding: '2rem',
            borderRadius: 10,
            minWidth: 500,
            height: 400,
            overflowY: 'auto'
          }}
          enableClipboard={false}
          collapsed
          src={result}
          theme="monokai"
        />
        <div>
          <p>
            JSON: <a href="api/ram">/api/ram</a>
          </p>
        </div>
      </main>
    </div>
  )
}

// This gets called on every request
export async function getServerSideProps() {
  const start = performance.now()
  const collections: Tcollections = ['characters', 'locations', 'episodes']
  const data = await fetchData(collections)
  const counters = charCounter(data, collections)
  const locations = getLocations(data)
  const end = performance.now() - start

  const result = [
    {
      exercise_name: 'Char counter',
      time: formatTime(end).time,
      in_time: formatTime(end).inTime,
      results: [
        {
          char: 'l',
          count: counters.locations,
          resource: 'location'
        },
        {
          char: 'e',
          count: counters.episodes,
          resource: 'episode'
        },
        {
          char: 'c',
          count: counters.characters,
          resource: 'character'
        }
      ]
    },
    {
      exercise_name: 'Episode locations',
      time: formatTime(end).time,
      in_time: formatTime(end).inTime,
      results: locations
    }
  ]

  return {
    props: { result }
  }
}

export default Home
